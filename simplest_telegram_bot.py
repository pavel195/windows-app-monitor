import requests
import threading
import webbrowser
import time
import logging
from config import CONFIG

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class SimplestTelegramBot:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ Telegram –±–æ—Ç–∞"""
        self.token = CONFIG['telegram']['bot_token']
        self.allowed_users = CONFIG['telegram']['allowed_users']
        self.chat_id = CONFIG['telegram']['chat_id']
        self.video_url = CONFIG['video']['url']
        self.base_url = f"https://api.telegram.org/bot{self.token}"
        self.running = False
        self.check_thread = None
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–æ—Ç–∞"""
        if not self.token:
            logger.error("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API Telegram
            response = requests.get(f"{self.base_url}/getMe")
            if response.status_code != 200:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API Telegram: {response.text}")
                return False
            
            bot_info = response.json()
            if not bot_info.get('ok'):
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {bot_info}")
                return False
            
            logger.info(f"–ë–æ—Ç {bot_info['result']['username']} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.running = True
            self.check_thread = threading.Thread(target=self._check_messages)
            self.check_thread.daemon = True
            self.check_thread.start()
            
            logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            return False
        
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        self.running = False
        if self.check_thread:
            self.check_thread.join(timeout=2)
        logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def _check_messages(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        last_update_id = 0
        
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                params = {'offset': last_update_id + 1, 'timeout': 30}
                response = requests.get(f"{self.base_url}/getUpdates", params=params)
                
                if response.status_code == 200:
                    updates = response.json()
                    if updates.get('ok'):
                        results = updates.get('result', [])
                        
                        for update in results:
                            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if update.get('update_id', 0) > last_update_id:
                                last_update_id = update.get('update_id')
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if 'message' in update and 'text' in update['message']:
                                user_id = update['message']['from']['id']
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
                                if self._is_user_allowed(user_id):
                                    message_text = update['message']['text']
                                    chat_id = update['message']['chat']['id']
                                    
                                    self._process_command(chat_id, message_text)
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∑–∞–ø—Ä–æ—Å—ã (–æ—Ç –∫–Ω–æ–ø–æ–∫)
                            if 'callback_query' in update:
                                user_id = update['callback_query']['from']['id']
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º
                                if self._is_user_allowed(user_id):
                                    callback_data = update['callback_query']['data']
                                    callback_id = update['callback_query']['id']
                                    chat_id = update['callback_query']['message']['chat']['id']
                                    message_id = update['callback_query']['message']['message_id']
                                    
                                    self._process_callback(callback_id, chat_id, message_id, callback_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            time.sleep(1)
    
    def _is_user_allowed(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º"""
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç, —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º
        if not self.allowed_users:
            return True
        return user_id in self.allowed_users
    
    def _process_command(self, chat_id, text):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if text == '/start':
            self._send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π Windows. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
        elif text == '/help':
            self._send_message(chat_id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/video - –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ")
        elif text == '/video':
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
            keyboard = {
                'inline_keyboard': [
                    [{'text': '–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'callback_data': 'open_video'}]
                ]
            }
            self._send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ:", keyboard)
    
    def _process_callback(self, callback_id, chat_id, message_id, callback_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
        requests.post(f"{self.base_url}/answerCallbackQuery", json={'callback_query_id': callback_id})
        
        if callback_data == 'open_video':
            try:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
                webbrowser.open(self.video_url)
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self._edit_message(chat_id, message_id, "–í–∏–¥–µ–æ –æ—Ç–∫—Ä—ã—Ç–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!")
            except Exception as e:
                self._edit_message(chat_id, message_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–µ–æ: {str(e)}")
    
    def _send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = {'chat_id': chat_id, 'text': text}
            if reply_markup:
                data['reply_markup'] = reply_markup
            
            response = requests.post(f"{self.base_url}/sendMessage", json=data)
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _edit_message(self, chat_id, message_id, text, reply_markup=None):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = {'chat_id': chat_id, 'message_id': message_id, 'text': text}
            if reply_markup:
                data['reply_markup'] = reply_markup
            
            response = requests.post(f"{self.base_url}/editMessageText", json=data)
            if response.status_code != 200:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def send_app_launch_notification(self, event_info):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
        Args:
            event_info (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        if not self.running or not event_info:
            return
        
        message = (
            f"üöÄ –ó–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {event_info['app_name']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {event_info['time']}\n"
            f"üîπ –ò—Å—Ç–æ—á–Ω–∏–∫: {event_info['source']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∏–¥–µ–æ
        keyboard = {
            'inline_keyboard': [
                [{'text': '–û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ', 'callback_data': 'open_video'}]
            ]
        }
        
        try:
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π chat_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç—É–¥–∞
            if self.chat_id:
                self._send_message(self.chat_id, message, keyboard)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {self.chat_id}")
            # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            elif self.allowed_users:
                for user_id in self.allowed_users:
                    self._send_message(user_id, message, keyboard)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.warning("–ù–µ —É–∫–∞–∑–∞–Ω chat_id –∏–ª–∏ allowed_users –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}") 